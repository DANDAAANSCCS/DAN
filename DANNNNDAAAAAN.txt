local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Auto TP Loop por Chat", "Ocean")

local MainTab = Window:NewTab("Main")
local MainSection = MainTab:NewSection("Todo activo automáticamente")

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local objetivoNombre = ""
local direccionTP = "atras"

-- direcciones de tp
local direcciones = {
	"adelante", "atras", "derecha", "izquierda",
	"diag_adel_der", "diag_adel_izq", "diag_atras_der", "diag_atras_izq"
}

-- cambio de direccion
local function elegirDireccion()
	local nueva
	repeat
		nueva = direcciones[math.random(1, #direcciones)]
	until nueva ~= direccionTP
	direccionTP = nueva
end

-- deteccion de chat
local ChatService = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents")
ChatService.OnMessageDoneFiltering.OnClientEvent:Connect(function(messageData)
	local sender = messageData.FromSpeaker
	if sender and sender ~= player.Name then
		objetivoNombre = sender
	end
end)

-- cambiar a otra direccion 
player.CharacterAdded:Connect(function()
	task.wait(1)
	elegirDireccion()
end)

-- Anti-AFK
for _, v in pairs(getconnections(player.Idled)) do v:Disable() end
player.Idled:Connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(), workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(), workspace.CurrentCamera.CFrame)
end)

-- Noclip
game:GetService("RunService").Stepped:Connect(function()
	local char = player.Character
	if char then
		for _, part in pairs(char:GetDescendants()) do
			if part:IsA("BasePart") then
				part.CanCollide = false
			end
		end
	end
end)

-- Anti-Knockback
local LastPosition = nil
spawn(function()
	while true do
		task.wait()
		local char = player.Character
		if char and char:FindFirstChild("HumanoidRootPart") then
			local root = char.HumanoidRootPart
			if root.AssemblyLinearVelocity.Magnitude > 250 or root.AssemblyAngularVelocity.Magnitude > 250 then
				root.AssemblyLinearVelocity = Vector3.zero
				root.AssemblyAngularVelocity = Vector3.zero
				if LastPosition then
					root.CFrame = LastPosition
				end
			elseif root.AssemblyLinearVelocity.Magnitude < 50 then
				LastPosition = root.CFrame
			end
		end
	end
end)

-- tp loop a direcciones aleatorias (8) En la consola hay registros (f9)
spawn(function()
	while true do
		wait(0.005)
		pcall(function()
			if objetivoNombre == "" then return end
			local objetivo = Players:FindFirstChild(objetivoNombre)
			local miChar = player.Character
			if objetivo and objetivo.Character and miChar then
				local miRoot = miChar:FindFirstChild("HumanoidRootPart")
				local objRoot = objetivo.Character:FindFirstChild("HumanoidRootPart")
				if miRoot and objRoot then
					local offset = Vector3.new()
					local dir = objRoot.CFrame.LookVector
					local right = objRoot.CFrame.RightVector
					local distancia = 3 -- ← ligeramente más lejos

					if direccionTP == "atras" then
						offset = -dir * distancia
					elseif direccionTP == "adelante" then
						offset = dir * distancia
					elseif direccionTP == "derecha" then
						offset = right * distancia
					elseif direccionTP == "izquierda" then
						offset = -right * distancia
					elseif direccionTP == "diag_adel_der" then
						offset = (dir + right).Unit * distancia
					elseif direccionTP == "diag_adel_izq" then
						offset = (dir - right).Unit * distancia
					elseif direccionTP == "diag_atras_der" then
						offset = (-dir + right).Unit * distancia
					elseif direccionTP == "diag_atras_izq" then
						offset = (-dir - right).Unit * distancia
					end

					miRoot.CFrame = objRoot.CFrame + offset
				end
			end
		end)
	end
end)

MainSection:NewLabel("TP Loop con 8 direcciones (cambiara al reaparecer)")

-- AutoStats
local AutoStatsTab = Window:NewTab("AutoStats")
local Auto = AutoStatsTab:NewSection("Autostats")

_G.Point = 0
_G.Stat = nil

local statMap = {
	["Fuerza"] = "strength",
	["Energía"] = "energy",
	["Vitalidad"] = "vitality",
	["Metal"] = "metalSkin"
}

-- slider
Auto:NewSlider("Puntos a aplicar", "Múltiplos de 200", 4000, 0, function(value)
	_G.Point = math.floor(value / 50) * 50
end)

Auto:NewDropdown("Elegir Stat", "Selecciona un stat", {"Fuerza", "Energía", "Vitalidad", "Metal"}, function(nombreVisible)
	_G.Stat = statMap[nombreVisible]
end)

Auto:NewButton("Aplicar puntos", "Modo explosivo (50 por hilo)", function()
	if not _G.Stat then
		warn("Selecciona un stat válido.")
		return
	end
	if _G.Point < 50 then
		warn("59 +")
		return
	end

	local lotes = math.floor(_G.Point / 50)
	for i = 1, lotes do
		spawn(function()
			for j = 1, 50 do
				game:GetService("ReplicatedStorage").Events.UpgradeAbility:InvokeServer(_G.Stat)
			end
		end)
	end

	print("🔥 Aplicados " .. _G.Point .. " puntos a " .. _G.Stat .. "")
end)
