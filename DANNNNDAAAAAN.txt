-- Cargar UI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Auto TP Loop por Chat", "Ocean")

local MainTab = Window:NewTab("Main")
local MainSection = MainTab:NewSection("Todo activo automáticamente")

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local objetivoNombre = ""

-- ✅ Detectar mensajes del chat (incluso los enviados por script)
local ChatService = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents")

ChatService.OnMessageDoneFiltering.OnClientEvent:Connect(function(messageData)
	local sender = messageData.FromSpeaker
	if sender and sender ~= player.Name then
		objetivoNombre = sender
	end
end)

-- ✅ Anti-AFK
for _, v in pairs(getconnections(player.Idled)) do v:Disable() end
player.Idled:Connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(), workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(), workspace.CurrentCamera.CFrame)
end)

-- ✅ No Clip permanente
game:GetService("RunService").Stepped:Connect(function()
	local char = player.Character
	if char then
		for _, part in pairs(char:GetDescendants()) do
			if part:IsA("BasePart") then
				part.CanCollide = false
			end
		end
	end
end)

-- ✅ Anti-Knockback
local LastPosition = nil
spawn(function()
	while true do
		task.wait()
		local char = player.Character
		if char and char:FindFirstChild("HumanoidRootPart") then
			local root = char.HumanoidRootPart
			if root.AssemblyLinearVelocity.Magnitude > 250 or root.AssemblyAngularVelocity.Magnitude > 250 then
				root.AssemblyLinearVelocity = Vector3.zero
				root.AssemblyAngularVelocity = Vector3.zero
				if LastPosition then
					root.CFrame = LastPosition
				end
			elseif root.AssemblyLinearVelocity.Magnitude < 50 then
				LastPosition = root.CFrame
			end
		end
	end
end)

-- ✅ TP loop detrás del último jugador que habló (real o por script)
spawn(function()
	while true do
		wait(0.05)
		pcall(function()
			if objetivoNombre == "" then return end
			local objetivo = Players:FindFirstChild(objetivoNombre)
			local miChar = player.Character
			if objetivo and objetivo.Character and miChar then
				local miRoot = miChar:FindFirstChild("HumanoidRootPart")
				local objRoot = objetivo.Character:FindFirstChild("HumanoidRootPart")
				if miRoot and objRoot then
					local atras = objRoot.CFrame.LookVector * -2
					miRoot.CFrame = objRoot.CFrame + atras
				end
			end
		end)
	end
end)

MainSection:NewLabel("TP Loop al último que habló (incluso scripts)")

-- ✅ AutoStats UI (CORREGIDO)
local AutoStatsTab = Window:NewTab("AutoStats")
local Auto = AutoStatsTab:NewSection("Auto distribución de stats")

_G.Point = 0
_G.Stat = "Strength"

local statMap = {
	["Fuerza"] = "Strength",
	["Energía"] = "Energy",
	["Vitalidad"] = "Durability",
	["Metal"] = "MetalSkin"
}

Auto:NewSlider("Puntos a aplicar", "", 1000, 0, function(value)
	_G.Point = value
end)

Auto:NewDropdown("Elegir Stat", "Selecciona un stat", {"Fuerza", "Energía", "Vitalidad", "Metal"}, function(nombreVisible)
	_G.Stat = statMap[nombreVisible]
end)

Auto:NewButton("Aplicar puntos", "Asigna los puntos seleccionados", function()
	if not _G.Stat then return end
	if _G.Point <= 0 then
		warn("Debes asignar al menos 1 punto.")
		return
	end
	for i = 1, _G.Point do
		spawn(function()
			game:GetService("ReplicatedStorage").Events.UpgradeStat:FireServer(_G.Stat)
		end)
	end
	print("✅ Aplicados " .. _G.Point .. " puntos a " .. _G.Stat)
end)
